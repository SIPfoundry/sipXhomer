# Copyright (C) 2012 eZuce Inc., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the AGPL license.

# Homer SIP Capture Server integration
bundle common homer_vars {
  vars:
    "wwwdir" string => "/var/www/html/webhomer";
    "config" string => "";
    "tmpdir" string => "$(wwwdir)/tmp";
    "sqldir" string => "$(wwwdir)/sql";
}

bundle agent homer {
  vars:
    "homer_db" slist => {
        "$(homer_vars.sqldir)/create_sipcapture.sql",
        "$(homer_vars.sqldir)/statistics.sql"
    };

  methods:
    homer_web|homer_capture::
      "any" usebundle => mysql;
      "any" usebundle => mysql_ensure_db("homer_db", "$(homer_db)");

    homer_web::
      "any" usebundle => mysql_ensure_db("homer_users", "$(homer_vars.sqldir)/homer_users.sql");
      "any" usebundle => homer_web_config;

    homer_capture::
      "any" usebundle => homer_capture_config;
      "any" usebundle => homer_capture_running;
}

bundle agent homer_capture_config {
  files:
    homer_capture::
      "$(sipx.SIPX_CONFDIR)/sipxhomer.ini"
        comment => "Homer capture server",
        create => "true",
        perms => mog("600","$(sipx.SIPXPBXUSER)","$(sipx.SIPXPBXGROUP)"),
        edit_defaults => empty,
        edit_line => homer_capture_config_contents;
}

bundle edit_line homer_capture_config_contents {
  insert_lines:
    "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/sipxhomer.ini.part"
    	insert_type => "file";
	"db-url=DATABASE=homer_db;SERVER=localhost;UID=root;DRIVER=MySQL;READONLY=0;";
}

bundle agent homer_web_config {
  vars:
    any::
      "auth_files" slist => {
        "index.html",
        "settings.php",
        "auth.php"
      };
  classes:
    any::
      "missing_preferences" not => fileexists("$(homer_vars.wwwdir)/preferences.php");
      "missing_auth" not => filesexist("@(auth_files)");

  files:
    homer_web::
      "$(homer_vars.wwwdir)"
        create => "true",
        perms => mog("755", "apache", "apache");

      "$(homer_vars.tmpdir)/."
        create => "true",
        perms => mog("755", "apache", "apache"); # TODO: try 700?

      "$(homer_vars.wwwdir)/configuration.php"
        comment => "Homer configuration  $(this.promiser)",
        create => "true",
        perms => mog("644", "apache", "apache"), # TODO: try 400
        edit_defaults => empty,
        edit_line => homer_web_configuration_php;
        
      "$(homer_vars.wwwdir)/class/auth/sipx"
        comment => "Homer/sipXecs authentication $(this.promisier)",
        link_from => ln_s("$(sipx.wwwdir)/webhomer-auth-sipx");
        
      "$(homer_vars.wwwdir)/class/auth/sipx/$(auth_files)"
        comment => "Homer/sipXecs authentication $(this.promisier)",
        create => "false",
        perms => mog("600", "apache", "apache");

    homer_web.missing_preferences::
      "$(homer_vars.wwwdir)/preferences.php"
        comment => "Homer preferences $(this.promiser)",
        copy_from => local_cp("$(homer_vars.wwwdir)/preferences_example.php");
        
    homer_web::
      "$(homer_vars.wwwdir)/preferences.php"
        comment => "Homer configuration  $(this.promiser)",
        create => "false",
        perms => mog("644", "apache", "apache"), # TODO: try 400
        edit_line => homer_web_preferences_php;        
}

# Editing isolated values can be replaced w/generating preferences from template once 
# more settings are captured in config-plugin/sipxhomer.xml
bundle edit_line homer_web_preferences_php {
  vars:
    "v[AUTHENTICATION]" string => "'sipx'";
    "k" slist => getindices("v");
    
  insert_lines:
	"define('$(k)',$(v[$(k)]));"
		location => after_php_header;

  delete_lines:
    "^\s*define\(\s*'$(k)'\s*,.*$";    	    
}

body location after_php_header {
  select_line_matching => "<\?php\s*";
  before_after => "after";
}

bundle edit_line homer_web_configuration_php {
  insert_lines:
"<?php
define('HOST', \"localhost\");
define('PORT', 3306);
define('USER', \"root\");
define('PW', \"\");
define('DB', \"homer_users\");
define('HOMER_HOST', \"localhost\");
define('HOMER_PORT', 3306);
define('HOMER_USER', \"homer_user\");
define('HOMER_PW', \"homer_password\");
define('HOMER_DB', \"homer_db\");
define('HOMER_TABLE', \"sip_capture\");
define('PCAPDIR',\"$(homer_vars.tmpdir)/\");
define('WEBPCAPLOC',\"/webhomer/tmp/\");
define('APILOC',\"/webhomer/api/\");

include(\"preferences.php\");
?>";
}

bundle agent homer_capture_running {
  vars:
    any::
      "service_command" string => "$(sipx.SIPX_LIBEXECDIR)/sipxhomer";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command("$(service_command)","homer_capture_running");
    !src.homer_capture::
      "any" usebundle => rh_chkconfig_status("sipxhomer on");
    !src.!homer_capture::
      "any" usebundle => rh_chkconfig_status("sipxhomer off");
      
  commands:
    (!homer_capture|stop_sipxecs).homer_capture_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxhomer"
        comment => "stop sipxhomer",
        args => "stop";

    homer_capture.!homer_capture_running.!stop_sipxecs::
      "$(sipx.SIPX_SERVICEDIR)/sipxhomer"
        comment => "start sipxhomer",
        args => "start";

    homer_capture.homer_capture_running.(restart_homer_capturey|restart_sipxecs)::
      "$(sipx.SIPX_SERVICEDIR)/sipxhomer"
        comment => "restart sipxhomer",
        args => "restart";
}


